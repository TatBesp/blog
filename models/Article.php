<?php

namespace app\models;

use Yii;
use yii\data\Pagination;
use yii\helpers\ArrayHelper;
use app\models\User;

/**
 * This is the model class for table "article".
 *
 * @property int $id
 */
class Article extends \yii\db\ActiveRecord
{
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'article';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['article_name'], 'required'],
            [['article_name', 'description', 'content'],'string'],
            [['date'], 'default', 'value' => date('Y-m-d')],
            [['article_name'], 'string', 'max' => 255],
            [['user_id'], 'default', 'value' => User::getUserId()]
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'article_name' => 'Название статьи',
            'description' => 'Описание',
            'content' => 'Статья',
            'date' => 'Дата',
            'image' => 'Изображение',
            'user_id' => 'Пользователь',

        ];
    }
    public function saveImage($filename)
    {
        $this->image = $filename;
        return $this->save(false);
    }
    public function getImage()
    {
        return ($this->image) ? '/images/' . $this->image : '/images/no-image.png';
    }
    public function deleteImage()
    {
        $imageUploadModel = new ImageUpload();
        $imageUploadModel->deleteCurrentImage($this->image);
    }
    public function beforeDelete()
    {
        $this->deleteImage();
        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }
     public static function getAll($pageSize = 5)
    {
        $query = Article::find()->orderby(['date'=>SORT_DESC]);
        $count = $query->count();
        $pagination = new Pagination(['totalCount' => $count, 'pageSize'=>$pageSize]);
        $articles = $query->offset($pagination->offset)
            ->limit($pagination->limit)
            ->all();
        
        $data['articles'] = $articles;
        $data['pagination'] = $pagination;
        
        return $data;
    }
    public function getArticlesByUser($user_id)
    {
        $query = Article::find()->where(['user_id'=>$user_id])->orderby(['date'=>SORT_DESC]);
        $count = $query->count();
        $pagination = new Pagination(['totalCount' => $count, 'pageSize'=>5]);
        $articles = $query->offset($pagination->offset)
            ->limit($pagination->limit)
            ->all();
        
        $data['articles'] = $articles;
        $data['pagination'] = $pagination;
        
        return $data;
    }
    public function getAuthor()
    {
        return $this->hasOne(User::className(), ['user_id'=>'user_id']);
    }
    
}